package connection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;

import entity.Article;
import entity.RegisteredUser;
import mapper.Mapper;
import persist.Agency;

public class ServerThread extends Thread{

	private int id;
	private Socket socket = null;
	
	public ServerThread(Socket socket,int id) { this.socket = socket; this.id = id;}
	@Override
	public void run() {
		try (
				ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
				ObjectInputStream in  = new ObjectInputStream(socket.getInputStream());
		){
			System.out.println(id + " connected");
			while(true)
			{
				String received = (String) in.readObject();
				String[] input = received.split(" ");
				
				Agency a = Agency.getInstance();
				
				String jsonUser;
				String jsonArticle;
				RegisteredUser ru;
				Article art;
				
				switch (input[0]){
				case "getarticles":
						List<Article> list = a.getAllArticles();
						String jsonArticleList = Mapper.articlesToJson(list);
						out.writeObject(jsonArticleList);
						break;
				case "login":
						jsonUser = input[1];
						ru = Mapper.userFromJson(jsonUser);
						RegisteredUser user = a.getUser(ru.getUsername());
						if (a.existsUser(ru) && user.getPassword().equals(ru.getPassword()))
						{
							if (user.isAdmin())
								out.writeObject("admin");
							else
								out.writeObject("writer");
						}
						else
							out.writeObject("error"); 
						break;
				case "register":
						jsonUser = input[1];
						ru = Mapper.userFromJson(jsonUser);
						if (a.existsUser(ru))
							out.writeObject("error");
						else
						{
							a.addUser(ru);
							out.writeObject("registered");
						}
						break;
				case "article":
						String title = input[1];
						art = a.getArticle(title);
						if (art != null)
						{
							jsonArticle = Mapper.articleToJson(art);
							out.writeObject(jsonArticle);
						}
						break;
				case "delete":
						String article = input[1];
						if (article != null)
						{
							art = Mapper.articleFromJson(article);
							System.out.println(art.toString());
							System.out.println("deleted?");
							a.deleteArticle(art);
							out.writeObject("deleted");
						}
						else
							out.writeObject("error");
						
				}

			}
			//a.serialize
		}catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println(id + " disconnected");
		}
             
		
	}

}
